//file:noinspection GroovyAssignabilityCheck

plugins() {
    id("java-library")

    id("checkstyle")
    id("com.github.spotbugs").version("5.0.14")
    id("org.cadixdev.licenser").version("0.6.1")

    id("maven-publish")
}

this.group = "net.elytrium"
this.version = "1.0.8"

compileJava() {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    options.getRelease().set(11)

    options.setEncoding("UTF-8")
}

repositories() {
    mavenCentral()

    maven() {
        setName("elytrium-repo")
        setUrl("https://maven.elytrium.net/repo/")
    }
    maven() {
        setName("papermc-repo")
        setUrl("https://papermc.io/repo/repository/maven-public/")
    }
}

dependencies() {
    annotationProcessor("net.java.dev.jna:jna-platform:5.13.0")
    annotationProcessor("com.github.bsideup.jabel:jabel-javac-plugin:1.0.0")
    api("net.elytrium.commons:utils:$elytriumCommonsVersion")
    compileOnly("com.velocitypowered:velocity-api:$velocityVersion")
    compileOnly("com.velocitypowered:velocity-proxy:$velocityVersion")
    compileOnly("com.velocitypowered:velocity-native:$velocityVersion")
    compileOnly("com.github.spotbugs:spotbugs-annotations:$spotbugsVersion")
    // Needs for some velocity methods.
    compileOnly("io.netty:netty-codec:$nettyVersion")
    compileOnly("io.netty:netty-handler:$nettyVersion")
    compileOnly("io.netty:netty-transport-native-epoll:$nettyVersion")
    compileOnly("it.unimi.dsi:fastutil-core:$fastutilVersion")
}

license() {
    header = file("HEADER.txt")
}

checkstyle() {
    toolVersion = "10.12.1"

    configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
    configProperties = ["configDirectory": "$rootDir/config/checkstyle"]
    maxErrors = 0
    maxWarnings = 0
}

spotbugsMain() {
    excludeFilter = file("${this.getRootDir()}/config/spotbugs/suppressions.xml")

    reports.register("html") {
        required = true
        outputLocation.value(layout.buildDirectory.file("reports/spotbugs/main/spotbugs.html"))
        stylesheet = "fancy-hist.xsl"
    }
}

tasks.register("sourcesJar", Jar) {
    archiveClassifier = "sources"
    from(sourceSets.main.getAllSource())
}

tasks.register("javadocJar", Jar) {
    archiveClassifier = "javadoc"
    from(javadoc)
}

publishing() {
    repositories() {
        maven() {
            credentials() {
                username = System.getenv("ELYTRIUM_MAVEN_USERNAME")
                password = System.getenv("ELYTRIUM_MAVEN_PASSWORD")
            }

            name = "elytrium-repo"
            url = "https://maven.elytrium.net/repo/"
        }
    }

    publications.create("publication", MavenPublication) {
        from(components.java)

        artifact(javadocJar)
        artifact(sourcesJar)
    }
}

javadoc() {
    options.setEncoding("UTF-8")
    options.setSource("17")
    options.links("https://docs.oracle.com/en/java/javase/17/docs/api/")
    options.addStringOption("Xdoclint:none", "-quiet")
    if (JavaVersion.current() >= JavaVersion.VERSION_1_9 && JavaVersion.current() < JavaVersion.VERSION_12) {
        options.addBooleanOption("-no-module-directories", true)
    }
}

artifacts() {
    archives(sourcesJar)
    archives(javadocJar)
}

sourceSets.main.java.srcDir(getTasks().register("generateTemplates", Copy) { task ->
    task.getInputs().properties("version": getVersion())

    task.from(file("src/main/templates"))
            .into(getLayout().getBuildDirectory().dir("generated/sources/templates"))
            .expand("version": getVersion())
}.map {
    it.getOutputs()
})
